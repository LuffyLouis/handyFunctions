[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement lhf563@126.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 handyFunctions authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hongfei Liu. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Liu H (2022). handyFunctions: Useful functions handfully manipulating analyzing data data.frame format. R package version 0.1.0, https://github.com/LuffyLouis/handyFunctions.","code":"@Manual{,   title = {handyFunctions: Useful functions for handfully manipulating and analyzing data with data.frame format},   author = {Hongfei Liu},   year = {2022},   note = {R package version 0.1.0},   url = {https://github.com/LuffyLouis/handyFunctions}, }"},{"path":"/index.html","id":"r-package-handyfunctions-version-010","dir":"","previous_headings":"","what":"Useful functions for handfully manipulating and analyzing data with data.frame format","title":"Useful functions for handfully manipulating and analyzing data with data.frame format","text":"Copyright (C) 2022, Hongfei Liu 2022/08/16","code":""},{"path":"/index.html","id":"handyfunctions","dir":"","previous_headings":"","what":"handyFunctions","title":"Useful functions for handfully manipulating and analyzing data with data.frame format","text":"goal handyFunctions get rid barrier deal non-standard data.frame format R newbies, especially user bioinformatics data analysis. Besides, also required plot functions downstream analysis dataset generated vcftools plink.","code":""},{"path":"/index.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of contents","title":"Useful functions for handfully manipulating and analyzing data with data.frame format","text":"Installation ReformatDataframe InteractDataframe plotSNVdensity License","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Useful functions for handfully manipulating and analyzing data with data.frame format","text":"can install development version handyFunctions like :","code":"## Clone it from github and install it locally git clone https://github.com/LuffyLouis/handyFunctions.git ## OR ## Install it in R remotes::install_github(\"LuffyLouis/handyFunctions\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Useful functions for handfully manipulating and analyzing data with data.frame format","text":"handyFunctionspackage contain three main sections, including ReformatDataframe, InteractDataframe, Post-VCF. basic examples show solve common problems data analysis:","code":""},{"path":"/index.html","id":"reformatdataframe","dir":"","previous_headings":"Example","what":"ReformatDataframe","title":"Useful functions for handfully manipulating and analyzing data with data.frame format","text":"section designed reformat data.frame odd colnames, rownames, even inappropriate dtypes columns.","code":""},{"path":"/index.html","id":"unifydataframe","dir":"","previous_headings":"Example > ReformatDataframe","what":"unifyDataframe","title":"Useful functions for handfully manipulating and analyzing data with data.frame format","text":"Based following example unifyDataframe function, can change formats raw data.frame want. Especially dtypes data.frame, can set custom=FALSE automatically changing appropriate dtypes. Note: due separation supporting regEx, please use \"[.][.]\" reformatting people data.frame.","code":"library('handyFunctions') data(\"people\") head(people) #>          ..name  ..sex ..age ..death..age #> 1       Ming Li   male    12           34 #> 2    Zixuan Liu female    23       thirty #> 3    Yizhen Zhu   male    NA           54 #> 4 Lingling Wang female    21           77 #> 5      Bang Wei   male    11         <NA> #> 6   Xiaoyu Chen female    74           89 modifiedPeople <- unifyDataframe(people,rawColSep = '[.][.]') head(modifiedPeople) #>            name    sex  age death_age #> 1       Ming Li   male   12        34 #> 2    Zixuan Liu female   23    thirty #> 3    Yizhen Zhu   male <NA>        54 #> 4 Lingling Wang female   21        77 #> 5      Bang Wei   male   11      <NA> #> 6   Xiaoyu Chen female   74        89"},{"path":"/index.html","id":"interactdataframe","dir":"","previous_headings":"Example","what":"InteractDataframe","title":"Useful functions for handfully manipulating and analyzing data with data.frame format","text":"InteractDataframe section designed interaction two data.frame one data.frame another vector.","code":""},{"path":"/index.html","id":"mergecustom","dir":"","previous_headings":"Example > InteractDataframe","what":"mergeCustom","title":"Useful functions for handfully manipulating and analyzing data with data.frame format","text":"Sometimes, often find fuzzy tedious ’d like merge two data.frame different colnames. Therefore, mergeCustom function may better solution get rid .","code":"library('handyFunctions') data(\"people\");data(\"grade\") head(people) #>          ..name  ..sex ..age ..death..age #> 1       Ming Li   male    12           34 #> 2    Zixuan Liu female    23       thirty #> 3    Yizhen Zhu   male    NA           54 #> 4 Lingling Wang female    21           77 #> 5      Bang Wei   male    11         <NA> #> 6   Xiaoyu Chen female    74           89 head(grade) #>            name chinese math english physics biology chemistry #> 1       Ming Li     120  130     145      80      90        99 #> 2    Zixuan Liu     109  120     110      85      99        88 #> 3    Yizhen Zhu      98  113     100      74     100        76 #> 4 Lingling Wang     138  145     126      55      89       100 #> 5      Bang Wei     119  105     139     100      78        99 #> 6   Xiaoyu Chen     119  105     120      69      80        77 merged <- mergeCustom(people,grade,xcol = '..name',ycol = 'name') head(merged) #>          ..name  ..sex ..age ..death..age chinese math english physics biology #> 1      Bang Wei   male    11         <NA>     119  105     139     100      78 #> 2 Lingling Wang female    21           77     138  145     126      55      89 #> 3       Ming Li   male    12           34     120  130     145      80      90 #> 4   Xiaoyu Chen female    74           89     119  105     120      69      80 #> 5    Yizhen Zhu   male    NA           54      98  113     100      74     100 #> 6    Zixuan Liu female    23       thirty     109  120     110      85      99 #>   chemistry #> 1        99 #> 2       100 #> 3        99 #> 4        77 #> 5        76 #> 6        88"},{"path":[]},{"path":"/index.html","id":"plotsnvdensity","dir":"","previous_headings":"Example > Post-VCF","what":"plotSNVdensity","title":"Useful functions for handfully manipulating and analyzing data with data.frame format","text":"","code":"library('handyFunctions') library('ggplot2') data(\"SNV_1MB_density_data\") head(SNV_1MB_density_data) #>   CHROM BIN_START SNP_COUNT VARIANTS.KB #> 1     1         0       253       0.253 #> 2     1   1000000        31       0.031 #> 3     1   2000000       208       0.208 #> 4     1   3000000        77       0.077 #> 5     1   4000000       204       0.204 #> 6     1   5000000        75       0.075 ShowSNPDensityPlot(SNV_1MB_density_data,binSize=1e6,chromSet = c(38:1),withchr=T)+   theme(axis.text.y = element_text(size=12)) #> ## Filtering the density data with specific chrom set... #> ## Judging if it should be added the chr and factoring... #> ## Reformatting the raw density data..."},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Useful functions for handfully manipulating and analyzing data with data.frame format","text":"project published MIT license, see file LICENSE.","code":""},{"path":"/reference/SNV_1MB_density_data.html","id":null,"dir":"Reference","previous_headings":"","what":"The SNPV number within 1Mb bins at chromosome levels generated from transcriptome dataset of two dog populations\n(including wild wolf and domesticated dogs). — SNV_1MB_density_data","title":"The SNPV number within 1Mb bins at chromosome levels generated from transcriptome dataset of two dog populations\n(including wild wolf and domesticated dogs). — SNV_1MB_density_data","text":"dataset containing SNV number within 1Mb bins called transcriptome dataset wild wolf domesticated dogs.","code":""},{"path":"/reference/SNV_1MB_density_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The SNPV number within 1Mb bins at chromosome levels generated from transcriptome dataset of two dog populations\n(including wild wolf and domesticated dogs). — SNV_1MB_density_data","text":"","code":"SNV_1MB_density_data"},{"path":"/reference/SNV_1MB_density_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The SNPV number within 1Mb bins at chromosome levels generated from transcriptome dataset of two dog populations\n(including wild wolf and domesticated dogs). — SNV_1MB_density_data","text":"data frame 2544 rows 4 variables: CHROM chrom id, reference genome CanFam3.1, numbers/carats BIN_START start genomic coordinate one bin relevant chromosome, numbers SNP_COUNT end genomic coordinate one bin relevant chromosome, numbers VARIANTS.KB SNV(variants) number within one bin per KB, numbers","code":""},{"path":"/reference/SNV_1MB_density_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"The SNPV number within 1Mb bins at chromosome levels generated from transcriptome dataset of two dog populations\n(including wild wolf and domesticated dogs). — SNV_1MB_density_data","text":"\"real dataset\"","code":""},{"path":"/reference/ShowSNPDensityPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Function of showing SNP density at chromosome level — ShowSNPDensityPlot","title":"Function of showing SNP density at chromosome level — ShowSNPDensityPlot","text":"Function showing SNP density chromosome level","code":""},{"path":"/reference/ShowSNPDensityPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function of showing SNP density at chromosome level — ShowSNPDensityPlot","text":"","code":"ShowSNPDensityPlot(   densityData,   binSize,   densityColorBar = c(\"grey\", \"darkgreen\", \"yellow\", \"red\"),   chromSet = c(1:22),   withchr = FALSE )"},{"path":"/reference/ShowSNPDensityPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function of showing SNP density at chromosome level — ShowSNPDensityPlot","text":"densityData raw density data generated vcftools binSize bin size set generating density data densityColorBar vector Specific color bar plotting density plot (generally four colors) chromSet vector Filtered chrom set want plot (must matched CHROM column densityData) withchr logical chromsome labels density plot prefixed \"chr\". Note: work filtered chrom set contain uncommon chrom symbols (e.g. NC0*, etc)","code":""},{"path":"/reference/ShowSNPDensityPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function of showing SNP density at chromosome level — ShowSNPDensityPlot","text":"ggplot2 object SNP density plot","code":""},{"path":"/reference/ShowSNPDensityPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function of showing SNP density at chromosome level — ShowSNPDensityPlot","text":"","code":"library(handyFunctions) data(SNV_1MB_density_data) ShowSNPDensityPlot(SNV_1MB_density_data, binSize = 1e6, chromSet = c(38:1)) #> ## Filtering the density data with specific chrom set... #> ## Judging if it should be added the chr and factoring... #> ## Raw chr set is numbered set, so it won't be changed! #> ## Reformatting the raw density data... #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA #> Warning: argument is not numeric or logical: returning NA"},{"path":"/reference/checkCols.html","id":null,"dir":"Reference","previous_headings":"","what":"check the validation and return index of cols given from input in rawDataFrame — checkCols","title":"check the validation and return index of cols given from input in rawDataFrame — checkCols","text":"check validation return index cols given input rawDataFrame","code":""},{"path":"/reference/checkCols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check the validation and return index of cols given from input in rawDataFrame — checkCols","text":"","code":"checkCols(rawDataFrame, cols)"},{"path":"/reference/checkCols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check the validation and return index of cols given from input in rawDataFrame — checkCols","text":"rawDataFrame raw data.frame cols specific cols given input","code":""},{"path":"/reference/checkCols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check the validation and return index of cols given from input in rawDataFrame — checkCols","text":"return validation (FALSE invaild cols input) index cols","code":""},{"path":"/reference/checkCols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"check the validation and return index of cols given from input in rawDataFrame — checkCols","text":"","code":"library(handyFunctions) data(people) checkCols(people, c(\"..name\", \"..sex\")) #> [1] 1 2 # OR checkCols(people, c(1, 2)) #> [1] 1 2"},{"path":"/reference/checkDtype.html","id":null,"dir":"Reference","previous_headings":"","what":"Return suggested dtype of vector input — checkDtype","title":"Return suggested dtype of vector input — checkDtype","text":"Return suggested dtype vector input","code":""},{"path":"/reference/checkDtype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return suggested dtype of vector input — checkDtype","text":"","code":"checkDtype(vector)"},{"path":"/reference/checkDtype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return suggested dtype of vector input — checkDtype","text":"vector vector/list input","code":""},{"path":"/reference/checkDtype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return suggested dtype of vector input — checkDtype","text":"Return suggested dtypes vector","code":""},{"path":"/reference/checkDtype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return suggested dtype of vector input — checkDtype","text":"","code":"library(handyFunctions) vector <- c(1, 2, 3, \"\", NA, \"  \", \"four\", \"NA\", 5) checkDtype(vector) #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> [1] \"char\""},{"path":"/reference/grade.html","id":null,"dir":"Reference","previous_headings":"","what":"Grade records of virtual persons in high school — grade","title":"Grade records of virtual persons in high school — grade","text":"dataset containing personal grade information (chinese, math, english, physics, biology, chemistry)  virtual persons.","code":""},{"path":"/reference/grade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grade records of virtual persons in high school — grade","text":"","code":"grade"},{"path":"/reference/grade.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Grade records of virtual persons in high school — grade","text":"data frame 6 rows 7 variables: name name, chinese foreigner, carats chinese grade chinese, numbers math grade math, numbers english grade english, numbers physics grade physics, numbers biology grade biology, numbers chemistry grade chemistry, numbers","code":""},{"path":"/reference/grade.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Grade records of virtual persons in high school — grade","text":"\"simulated dataset\"","code":""},{"path":"/reference/handyFunctions-package.html","id":null,"dir":"Reference","previous_headings":"","what":"handyFunctions: Useful functions for handfully manipulating and analyzing data with data.frame format — handyFunctions-package","title":"handyFunctions: Useful functions for handfully manipulating and analyzing data with data.frame format — handyFunctions-package","text":"useful functions simply manipulating analyzing data data.frame format. mainly includes following sections: ReformatDataframe (reformat dataframe modifiers), InteractDataframe, Post-VCF (downstream analysis data generated vcftools plink).","code":""},{"path":[]},{"path":"/reference/matchIndex.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the index of source vector matched with query vector — matchIndex","title":"Return the index of source vector matched with query vector — matchIndex","text":"Return index source vector matched query vector","code":""},{"path":"/reference/matchIndex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the index of source vector matched with query vector — matchIndex","text":"","code":"matchIndex(SourceInfo, queryInfo, queryType = TRUE)"},{"path":"/reference/matchIndex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the index of source vector matched with query vector — matchIndex","text":"SourceInfo source vector queryInfo query vector queryType logical set accurate match (default: TRUE)","code":""},{"path":"/reference/matchIndex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the index of source vector matched with query vector — matchIndex","text":"index source vector matched query vector","code":""},{"path":"/reference/matchIndex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the index of source vector matched with query vector — matchIndex","text":"","code":"library(handyFunctions) data(grade) matchIndex(grade[, \"name\"], c(\"Ming Li\", \"Bang Wei\")) #> [1] 1 5"},{"path":"/reference/mergeCustom.html","id":null,"dir":"Reference","previous_headings":"","what":"merge two data.frame based on xcol and ycol — mergeCustom","title":"merge two data.frame based on xcol and ycol — mergeCustom","text":"merge two data.frame based xcol ycol","code":""},{"path":"/reference/mergeCustom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"merge two data.frame based on xcol and ycol — mergeCustom","text":"","code":"mergeCustom(x, y, xcol, ycol)"},{"path":"/reference/mergeCustom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"merge two data.frame based on xcol and ycol — mergeCustom","text":"x first data.frame y second data.frame xcol colnames want merged first data.frame ycol colnames want merged second data.frame","code":""},{"path":"/reference/mergeCustom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"merge two data.frame based on xcol and ycol — mergeCustom","text":"return new data.frame merged","code":""},{"path":"/reference/mergeCustom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"merge two data.frame based on xcol and ycol — mergeCustom","text":"","code":"library(handyFunctions) data(people) data(grade) mergeCustom(people, grade, \"..name\", \"name\") #>          ..name  ..sex ..age ..death..age chinese math english physics biology #> 1      Bang Wei   male    11         <NA>     119  105     139     100      78 #> 2 Lingling Wang female    21           77     138  145     126      55      89 #> 3       Ming Li   male    12           34     120  130     145      80      90 #> 4   Xiaoyu Chen female    74           89     119  105     120      69      80 #> 5    Yizhen Zhu   male    NA           54      98  113     100      74     100 #> 6    Zixuan Liu female    23       thirty     109  120     110      85      99 #>   chemistry #> 1        99 #> 2       100 #> 3        99 #> 4        77 #> 5        76 #> 6        88"},{"path":"/reference/modifyColNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Return reformatted data.frame with standard col names — modifyColNames","title":"Return reformatted data.frame with standard col names — modifyColNames","text":"Return reformatted data.frame standard col names","code":""},{"path":"/reference/modifyColNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return reformatted data.frame with standard col names — modifyColNames","text":"","code":"modifyColNames(rawDataFrame, cols = TRUE, rawSep = \"..\", sep = \"_\")"},{"path":"/reference/modifyColNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return reformatted data.frame with standard col names — modifyColNames","text":"rawDataFrame Raw data.frame input cols Specific col names indexes want reformat (default: TRUE, use cols) rawSep Raw odd separation symbol col names raw data.frame. Note: supports regEx (regular expression), \".\" means possible symbols. want use \".\" dot notation, please use \"[.]\". sep Separation symbol col names modified data.frame","code":""},{"path":"/reference/modifyColNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return reformatted data.frame with standard col names — modifyColNames","text":"modified data.frame col names separated given delimitator","code":""},{"path":"/reference/modifyColNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return reformatted data.frame with standard col names — modifyColNames","text":"","code":"library(handyFunctions) data(people) modified_people <- modifyColNames(people,rawSep = \"[.][.]\")"},{"path":"/reference/modifyColTypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Return suggested appropriate dtypes for each column in rawDataFrame — modifyColTypes","title":"Return suggested appropriate dtypes for each column in rawDataFrame — modifyColTypes","text":"Return suggested appropriate dtypes column rawDataFrame","code":""},{"path":"/reference/modifyColTypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return suggested appropriate dtypes for each column in rawDataFrame — modifyColTypes","text":"","code":"modifyColTypes(rawDataFrame, cols = TRUE, dtype = FALSE, custom = FALSE)"},{"path":"/reference/modifyColTypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return suggested appropriate dtypes for each column in rawDataFrame — modifyColTypes","text":"rawDataFrame Raw data.frame cols Specify cols want change dtypes custom FALSE (default: TRUE, cols) dtype Specify indexed matched dtypes whcih want update custom FALSE (default: FALSE, automatically update) custom Option whether set auto/custom , can specify custom dtypes cols given setting TRUE (default: FALSE, auto)","code":""},{"path":"/reference/modifyColTypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return suggested appropriate dtypes for each column in rawDataFrame — modifyColTypes","text":"Return new data.frame appropriate dtypes suggested cols","code":""},{"path":"/reference/modifyColTypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return suggested appropriate dtypes for each column in rawDataFrame — modifyColTypes","text":"","code":"library(handyFunctions) data(people) modifyColTypes(people) #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #>          ..name  ..sex ..age ..death..age #> 1       Ming Li   male    12           34 #> 2    Zixuan Liu female    23       thirty #> 3    Yizhen Zhu   male  <NA>           54 #> 4 Lingling Wang female    21           77 #> 5      Bang Wei   male    11         <NA> #> 6   Xiaoyu Chen female    74           89"},{"path":"/reference/modifyRowNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Return reformatted data.frame with standard row names — modifyRowNames","title":"Return reformatted data.frame with standard row names — modifyRowNames","text":"Return reformatted data.frame standard row names","code":""},{"path":"/reference/modifyRowNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return reformatted data.frame with standard row names — modifyRowNames","text":"","code":"modifyRowNames(rawDataFrame, rows = TRUE, rawSep = \"..\", sep = \"_\")"},{"path":"/reference/modifyRowNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return reformatted data.frame with standard row names — modifyRowNames","text":"rawDataFrame Raw data.frame input rows Specific row names indexes want reformat (default: TRUE, use row) rawSep Raw odd separation symbol row names raw data.frame. Note: supports regEx (regular expression), \".\" means possible symbols. want use \".\" dot notation, please use \"[.]\". sep Separation symbol row names modified data.frame","code":""},{"path":"/reference/modifyRowNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return reformatted data.frame with standard row names — modifyRowNames","text":"modified data.frame row names separated given delimitator","code":""},{"path":"/reference/modifyRowNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return reformatted data.frame with standard row names — modifyRowNames","text":"","code":"library(handyFunctions) data(people) modifyRowNames(people) #>          ..name  ..sex ..age ..death..age #> 1       Ming Li   male    12           34 #> 2    Zixuan Liu female    23       thirty #> 3    Yizhen Zhu   male    NA           54 #> 4 Lingling Wang female    21           77 #> 5      Bang Wei   male    11         <NA> #> 6   Xiaoyu Chen female    74           89"},{"path":"/reference/people.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic information of virtual persons — people","title":"Basic information of virtual persons — people","text":"dataset containing personal basic information (name, sex, age, death_age) virtual persons.","code":""},{"path":"/reference/people.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic information of virtual persons — people","text":"","code":"people"},{"path":"/reference/people.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Basic information of virtual persons — people","text":"data frame 6 rows 4 variables: ..name name, chinese foreigner, carats ..sex sex person, carats ..age living age final record, numbers ..death..age final age person dead, numbers","code":""},{"path":"/reference/people.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Basic information of virtual persons — people","text":"\"simulated dataset\"","code":""},{"path":"/reference/queryingInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"return index of x data.frame with the given vector/list or ycol in data.frame\n(if set the accurate match or not) — queryingInfo","title":"return index of x data.frame with the given vector/list or ycol in data.frame\n(if set the accurate match or not) — queryingInfo","text":"return index x data.frame given vector/list ycol data.frame (set accurate match )","code":""},{"path":"/reference/queryingInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"return index of x data.frame with the given vector/list or ycol in data.frame\n(if set the accurate match or not) — queryingInfo","text":"","code":"queryingInfo(SourceData, sourceCol, queryCol, queryInfo, queryType = TRUE)"},{"path":"/reference/queryingInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"return index of x data.frame with the given vector/list or ycol in data.frame\n(if set the accurate match or not) — queryingInfo","text":"SourceData source data.frame want query sourceCol col names index query field source data.frame queryCol col names index return field source data.frame queryInfo vector/list query info queryType logical set accurate match (default: TRUE)","code":""},{"path":"/reference/queryingInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"return index of x data.frame with the given vector/list or ycol in data.frame\n(if set the accurate match or not) — queryingInfo","text":"vector query field matched query info source data","code":""},{"path":"/reference/queryingInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"return index of x data.frame with the given vector/list or ycol in data.frame\n(if set the accurate match or not) — queryingInfo","text":"","code":"library(handyFunctions) data(grade) queryingInfo(grade, \"name\", \"chinese\", c(\"Ming Li\", \"Bang Wei\")) #> [1] 120 119"},{"path":"/reference/splitCol.html","id":null,"dir":"Reference","previous_headings":"","what":"Return specific-indexed vector according to given delimitator/separator by splitting one col in data.frame — splitCol","title":"Return specific-indexed vector according to given delimitator/separator by splitting one col in data.frame — splitCol","text":"Return specific-indexed vector according given delimitator/separator splitting one col data.frame","code":""},{"path":"/reference/splitCol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return specific-indexed vector according to given delimitator/separator by splitting one col in data.frame — splitCol","text":"","code":"splitCol(data, col = FALSE, sep, index, fixed = TRUE)"},{"path":"/reference/splitCol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return specific-indexed vector according to given delimitator/separator by splitting one col in data.frame — splitCol","text":"data vector data.frame input col col names indexes data.frame input sep separation deliminator index index symbol want fixed logical. TRUE match split exactly, otherwise use regular expressions, detailed info can seen strsplit.","code":""},{"path":"/reference/splitCol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return specific-indexed vector according to given delimitator/separator by splitting one col in data.frame — splitCol","text":"specific-indexed vector factor","code":""},{"path":"/reference/splitCol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return specific-indexed vector according to given delimitator/separator by splitting one col in data.frame — splitCol","text":"","code":"library(handyFunctions) data(people) splitCol(people, col = 1, sep = \" \", index = 2) #> [1] <NA> <NA> <NA> <NA> <NA> <NA> #> Levels: Bang Wei Lingling Wang Ming Li Xiaoyu Chen Yizhen Zhu Zixuan Liu"},{"path":"/reference/unifyDataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Reformat dataframe with the all modifiers simultaneously (colNames, rowNames and dtypes) — unifyDataframe","title":"Reformat dataframe with the all modifiers simultaneously (colNames, rowNames and dtypes) — unifyDataframe","text":"Reformat dataframe modifiers simultaneously (colNames, rowNames dtypes)","code":""},{"path":"/reference/unifyDataframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reformat dataframe with the all modifiers simultaneously (colNames, rowNames and dtypes) — unifyDataframe","text":"","code":"unifyDataframe(   rawDataFrame,   rawRowSep = \"..\",   rowSep = \"_\",   rawColSep = \"..\",   colSep = \"_\",   changeDtype = TRUE )"},{"path":"/reference/unifyDataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reformat dataframe with the all modifiers simultaneously (colNames, rowNames and dtypes) — unifyDataframe","text":"rawDataFrame raw data.frame rawRowSep raw separation deliminator row names raw data.frame rowSep new separation deliminator row names rawColSep raw separation deliminator col names raw data.frame colSep new separation deliminator col names changeDtype change dtypes cols","code":""},{"path":"/reference/unifyDataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reformat dataframe with the all modifiers simultaneously (colNames, rowNames and dtypes) — unifyDataframe","text":"modified data.frame applied modifiers","code":""},{"path":"/reference/unifyDataframe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reformat dataframe with the all modifiers simultaneously (colNames, rowNames and dtypes) — unifyDataframe","text":"","code":"library(handyFunctions) data(people) unifyDataframe(people,rawColSep = \"[.][.]\") #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #>            name    sex  age death_age #> 1       Ming Li   male   12        34 #> 2    Zixuan Liu female   23    thirty #> 3    Yizhen Zhu   male <NA>        54 #> 4 Lingling Wang female   21        77 #> 5      Bang Wei   male   11      <NA> #> 6   Xiaoyu Chen female   74        89"},{"path":"/news/index.html","id":"handyfunctions-010","dir":"Changelog","previous_headings":"","what":"handyFunctions 0.1.0","title":"handyFunctions 0.1.0","text":"Added NEWS.md file track changes package.","code":""}]
